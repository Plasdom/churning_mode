# settings file for BOUT++
#
# Churning mode simulation in 2D slab around X-point(s)
#


# settings used by the core code

nout = 20    # number of time-steps
timestep = 1.0e-3  # time between outputs [1/wci]

MXG = 4                  
MYG = 0                  

periodicX = false 
#periodicY = false

[mesh]

nx = 74
ny = 1
nz = 128

staggergrids = true

Lx = 2
Ly = 1
Lz = 4
dx = Lx / nx
dy = Ly / ny
dz = Lz / nz

ixseps1 = -1    # Required to get BCs in y-axis to work

##################################################
# derivative methods

[mesh:ddx]

first = C4
second = C4
fourth = C4
upwind = W3

[mesh:ddy]

first = C4
second = C4
fourth = C4
upwind = W3

[mesh:ddz]

first = C4
second = C4
fourth = C4
upwind = W3

###################################################
# Time-integration solver

[solver]
type = cvode
atol = 1e-16  # absolute tolerance
rtol = 1e-8   # relative tolerance
mxstep = 10000  # Maximum internal steps per output
use_precon = false

##################################################
# general settings for the model

[phiSolver]
type = petsc  # Needed if Boussinesq = false
#pctype = bjacobi  # Preconditioning type

fourth_order = true  # 4th order or 2nd order

inner_boundary_flags = 0
outer_boundary_flags = 0

# 0  = Zero value
# 10 = Zero gradient AC inner & outer
# 15 = Zero gradient AC and DC
# 768 = Zero laplace inner & outer

#[phiSolver:precon]  # Preconditioner (if pctype=user)
#filter = 0.0     # Must not filter solution
#flags = 49152  # set_rhs i.e. identity matrix in boundaries


#[laplacexy]

#direct=true
#include_y_derivs = true
#pf_bndry_dirichlet = true
#core_bndry_dirichlet = true
#y_bndry = dirichlet
#ksptype = gmres   # Iterative solver type
#pctype = bjacobi  # Preconditioner. "jacobi", "bjacobi" and "sor" usually good

[model]

# Parameters
chi = 0.0e0         # Thermal diffusivity [m^2 s^-1]
D_m = 0.0e0           # Magnetic diffusivity [m^2 s^-1]
mu = 0.0e0            # Kinematic viscosity [m^2 s^-1]
R_0 = 1.5           # Major radius [m]
a_mid = 0.6         # Minor radius at midplane [m]
n_sepx = 1.0e19     # Electron density at separatrix [m^-3]
T_sepx = 100        # Plasma temperature at separatrix [eV]
B_t0 = 2            # Toroidal field strength [T]
B_pmid = 2          # Poloidal field strength [T]

# Switches
invert_laplace = false        # Use Laplace inversion routine to solve phi (if false, will instead solve via a constraint)
evolve_pressure = false              # Evolve plasma pressure
include_churn_drive_term = false    # Include the churn driving term in the vorticity equation (2 * epsilon * dP/dy)
include_mag_restoring_term = true  # Include the poloidal magnetic field restoring term in the vorticity equation (2 / beta_p * {psi, Del^2 psi})

[P]

# Initialise in normalised form
gradient = 5
Lz = 4
intercept = 1 - gradient * Lz / 2
initial_P = intercept + gradient * (Lz * {yarg} / (2*pi))
function = [yarg = z](initial_P)

bndry_ydown = dirichlet(5*4/2 + 1)
bndry_yup = dirichlet(1 - 5*4/2)
bndry_xin = none
bndry_xout = none

[psi]

bndry_all = none

# Define parameters and functions for psi initialisation
Lz = 4
Lx = 2

a = 0.25        # Overall decay length of psi from centre
d = 0.5         # Decay length of differential rotation from centre
chi_0 = 0      # Max rotation of psi at the centre

x_c = (x - 0.5) * Lx
y_c = (z/(2*pi) - 0.5) * Lz
r = sqrt(x_c^2 + y_c^2)
theta = atan(y_c, x_c)
initial_psi = (2.71828 ^ (-({r_coord}^2/a^2)) * ( {r_coord}^3 * sin(3 * ({theta_coord} + chi_0 * 2.71828 ^ (-{r_coord}^2 / d^2))) ) )

function = [r_coord=r, theta_coord=theta](initial_psi)
scale = [r_coord = 1.0, theta_coord = 3*pi/2] (2.71828 ^ (-(1/a^2)) / initial_psi)

[omega]

bndry_all = none

# Initialise in normalised form
function = 0

#[phi]

#bndry_all = dirichlet

# Initialise in normalised form
#function = 0
