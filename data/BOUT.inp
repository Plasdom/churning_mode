# settings file for BOUT++
#
# Churning mode simulation in 2D slab around X-point(s)
#


# settings used by the core code

nout = 25     # number of time-steps
timestep = 1.0e-1  # time between outputs [1/wci]

MXG = 4                  
MYG = 4                  

[mesh]

nx = 132
ny = 132
nz = 1

Lx = 2
Ly = 2
dx = Lx / nx
dy = Ly / ny

ixseps1 = -1    # Required to get BCs in y-axis to work

##################################################
# derivative methods

[mesh:ddx]

first = C2
second = C2
fourth = C2
upwind = W3

[mesh:ddy]

first = C2
second = C2
fourth = C2
upwind = W3

[mesh:ddz]

first = C2
second = C2
fourth = C2
upwind = W3

###################################################
# Time-integration solver

[solver]

atol = 1e-10  # absolute tolerance
rtol = 1e-05   # relative tolerance
mxstep = 10000  # Maximum internal steps per output

##################################################
# general settings for the model

[model]

# Parameters
chi = 1.0e2         # Thermal diffusivity [m^2 s^-1]
D_m = 0.0           # Magnetic diffusivity [m^2 s^-1]
mu = 0.0            # Kinematic viscosity [m^2 s^-1]
R_0 = 1.5           # Major radius [m]
a_mid = 0.6         # Minor radius at midplane [m]
n_sepx = 1.0e19     # Electron density at separatrix [m^-3]
T_sepx = 100        # Plasma temperature at separatrix [eV]
B_t0 = 2            # Toroidal field strength [T]
B_pmid = 2          # Poloidal field strength [T]

# Switches
evolve_pressure = false              # Evolve plasma pressure
include_mag_restoring_term = false  # Include the poloidal magnetic field restoring term in the vorticity equation (2 / beta_p * {psi, Del^2 psi})
include_churn_drive_term = true    # Include the churn driving term in the vorticity equation (2 * epsilon * dP/dy)

[P]

# Initialise in normalised form
gradient = 5
Ly = 2
intercept = 1 - gradient * Ly / 2
initial_P = intercept + gradient * (Ly * {yarg} / (2*pi))
function = [yarg = y](initial_P)
bndry_ydown = dirichlet(1-5)
bndry_yup = dirichlet(1+5)
bndry_xin = none
bndry_xout = none

[psi]

bndry_all = none

# Define parameters and functions for psi initialisation
a = 0.25        # Overall decay length of psi from centre
chi_0 = 0       # Max rotation of psi at the centre
d = 0.1         # Decay length of differential rotation from centre
get_r = (({xarg}-0.5)^2 + (({yarg} / (2*pi)) - 0.5)^2)^0.5
get_theta = atan((({yarg} / (2*pi)) - 0.5), {xarg}-0.5)
r_coords = [xarg = x, yarg = y](get_r)
theta_coords = [xarg = x, yarg = y](get_theta)
initial_psi = (2.71828 ^ (-({r}^2/a^2)) * ( {r}^3 * sin(3 * ({theta} + chi_0 * 2.71828 ^ (-{theta}^2 / d^2))) ) )

# Get scale such that psi=1 at sqrt(x^2 + y^2) = 1 (with x, y in units of a_mid, x in (0, Lx) and y in (0, Ly) )
Ly = 2
scale = [r = 1/Ly, theta = 3*pi/2] (2.71828 ^ (-({r}^2/a^2)) / initial_psi)

# Initalise psi
function = [r = r_coords, theta = theta_coords](initial_psi)

[omega]

bndry_all = dirichlet_o3

# Initialise in normalised form
function = 0

[phi]

bndry_all = dirichlet

# Initialise in normalised form
function = 0
