# settings file for BOUT++
#
# Churning mode simulation in 2D slab around X-point(s)
#


# settings used by the core code

nout = 100     # number of time-steps
timestep = 3.0e-2  # time between outputs [1/wci]

#MZ = 128                # Number of Z points
#ZMIN = 0
#ZMAX = 2/(2*pi)      # z is in fractions of 2pi
MXG = 4                  
MYG = 4                  

[mesh]

nx = 132
ny = 132
nz = 1

dx = 2 / nx
dy = 2 / ny

ixseps1 = -1    # Required to get BCs in y-axis to work, not sure why

##################################################
# derivative methods

[mesh:ddx]

first = C4
second = C4
fourth = C4
upwind = W3

[mesh:ddy]

first = C4
second = C4
fourth = C4
upwind = W3

[mesh:ddz]

first = C4
second = C4
fourth = C4
upwind = W3

###################################################
# Time-integration solver

[solver]

atol = 1e-10  # absolute tolerance
rtol = 1e-05   # relative tolerance
mxstep = 10000  # Maximum internal steps per output

###################################################
# Electrostatic potential solver (Boussinesq)

[phiBoussinesq]
# By default type is tri (serial) or spt (parallel)

##################################################
# general settings for the model

#[laplace]
#type = multigrid
#multigridlevel = 3
#solvertype = 0
#rtol = 1e-07

#global_flags = 0
#inner_boundary_flags = 0 # Dirichlet
#outer_boundary_flags = 0 # Dirichlet

[model]

chi = 0.0e0   # Thermal diffusivity
D_m = 0.0 # Magnetic diffusivity
mu = 0.0    # Vorticity diffusivity
epsilon = 10.0    # Aspect ratio
beta_p = 100000.0   # Poloidal beta

# settings for individual variables
# The section "All" defines default settings for all variables
# These can be overridden for individual variables in
# a section of that name.

#[all]

#bndry_all = none

[P]  # Pressure

intercept = 0.5
gradient = 1
function = intercept + gradient * (y / (2*pi))
bndry_xin = none
bndry_xout = none
bndry_yup = dirichlet(1.5)
bndry_ydown = dirichlet(0.5)

[psi]

scale=1.0e-0
x_coord =  {xarg} - 0.5
y_coord = ({yarg} / (2*pi)) - 0.5
d = 0.02
function = [xarg = x, yarg = y](2.71828 ^ (-((x_coord^2 + y_coord^2)/d)) * ((y_coord ^ 3) - (3 * (x_coord ^ 2) * y_coord)))
#function = [xarg = x, yarg = y]( (y_coord ^ 3) - (3 * (x_coord ^ 2) * y_coord) )
bndry_all = none

[omega]

function = 0
bndry_all = dirichlet_o3

[phi]

function = 0
bndry_all = dirichlet
